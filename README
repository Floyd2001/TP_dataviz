Voici le **README complet** avec toutes les étapes, y compris la structure à préparer pour `traitements.csv`, que tu pourras remplir plus tard toi-même :

---

# 📘 README – Création automatique d’un graphe Neo4j à partir des crimes Police/Gendarmerie

## 🎯 Objectif

Importer un fichier Excel contenant les enregistrements de crimes/délits par service (Police ou Gendarmerie) et par département, puis créer un **graphe relationnel dans Neo4j** représentant les interactions entre services, départements, crimes et années.

---

## 🛠️ Pipeline d’ingestion

### 1. 📥 Lecture et fusion du fichier Excel

* Charger toutes les feuilles de l’Excel (`pandas.ExcelFile`).
* Extraire pour chaque bloc (par année) :

  * Le **type de service** (Police ou Gendarmerie),
  * Les **départements (CGD/CSP)** avec dans les propriétés le terme ,
  * Les **crimes** et sous-catégories en ligne.
* Normaliser en format long avec colonnes :

  ```
  Crime | Service | Département | Année | Nombre | Type_Service
  ```

---

### 2. 🧼 Nettoyage et transformation

* Supprimer lignes vides, totaux, et noms mal formés.
* Fusionner les entêtes multi-lignes si nécessaire.
* Garder uniquement les lignes numériques valides.
* Agréger les doublons :

  ```python
  df.groupby(['Année', 'Crime', 'Service', 'Département', 'Type_Service'], as_index=False)['Nombre'].sum() ??????
  ```

---

### 3.  Ingestion Neo4j avec Cypher

#### A. Lancer Neo4j Desktop

Création d une base de données locale 

#### B. Déposer les fichiers CSV dans `/import`

#### C. Création des nœuds

```cypher
LOAD CSV WITH HEADERS FROM 'file:///Service.csv' AS row
MERGE (s:Service {nom: row.nom, type: row.type});

LOAD CSV WITH HEADERS FROM 'file:///Crime.csv' AS row
MERGE (c:Crime {nom: row.nom});

LOAD CSV WITH HEADERS FROM 'file:///Annee.csv' AS row
MERGE (a:Annee {val: toInteger(row.val)});

LOAD CSV WITH HEADERS FROM 'file:///Departement.csv' AS row
MERGE (d:Departement {nom: row.nom});
```

Ou alors en un fichier massif? 

#### D. Création des relations

```cypher
// PATROUILLE
LOAD CSV WITH HEADERS FROM 'file:///relations.csv' AS row
MATCH (s:Service {nom: row.service})
MATCH (d:Departement {nom: row.departement})
MERGE (s)-[:PATROUILLE]->(d);

// A_LIEU
LOAD CSV WITH HEADERS FROM 'file:///relations.csv' AS row
MATCH (c:Crime {nom: row.crime})
MATCH (d:Departement {nom: row.departement})
MERGE (c)-[:A_LIEU]->(d);

// A_ÉTÉ_RÉALISÉ
LOAD CSV WITH HEADERS FROM 'file:///relations.csv' AS row
MATCH (c:Crime {nom: row.crime})
MATCH (a:Annee {val: toInteger(row.annee)})
MERGE (c)-[r:A_ÉTÉ_RÉALISÉ]->(a)
SET r.nombre = toInteger(row.nombre);
```
// Traite
LOAD CSV WITH HEADERS FROM 'file:///traitements.csv' AS row
MATCH (s:Service {nom: row.service})
MATCH (c:Crime {nom: row.crime})
MERGE (s)-[r:TRAITE {année: toInteger(row.annee)}]->(c)
SET r.nombre = toInteger(row.nombre);
```


---

## 🧠 Structure finale du graphe

```
(:Service {type}) --[:PATROUILLE]--> (:Département)
(:Crime) --[:A_LIEU]--> (:Département)
(:Service) --[:TRAITE {année, nombre}]--> (:Crime)
```

---
